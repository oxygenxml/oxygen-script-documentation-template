def scriptToRun // The sh script that needs to be run, according to the input file.

task initScript() {
    doFirst {
        if (!new File("${projectDir}/extracted/oxygen/").exists()) {
            ant.get(src: 'https://www.oxygenxml.com/InstData/Editor/All/oxygen.tar.gz', dest: "${projectDir}/oxygen.tar.gz", skipexisting: 'true')
            ant.untar(src: "${projectDir}/oxygen.tar.gz", dest: "${projectDir}/extracted", compression: 'gzip')

            String key = System.getenv('SCRIPTING_LICENSE_KEY')
            if (key == null) {
                throw new TaskExecutionException(it, new Exception("You need a valid Oxygen Scripting license key."))
            } else {
                new File("${projectDir}/extracted/oxygen/scriptinglicensekey.txt").write(key.replaceAll("  ", "\n"))
            }
        }
    }

    String schemaExtension = schemaFile.lastIndexOf('.').with {it != -1 ? schemaFile[it..<schemaFile.length()] : schemaFile}

    switch (schemaExtension) {
        case ".xsd":
            scriptToRun = "schemaDocumentation.sh"
            break
        case ".xsl":
            scriptToRun = "stylesheetDocumentation.sh"
            break
        case ".wsdl":
            scriptToRun = "wsdlDocumentation.sh"
            break
        default:
            break
    }

    doLast {
        project.exec {
            workingDir "${projectDir}/extracted/oxygen/scripts"
            commandLine 'chmod', '700', scriptToRun
        }
    }
}

task generateDoc(type: Exec, dependsOn: [initScript]) {
    // Compute the absolute schema file path depending on where the script is started from.
    String schemaFilePath = "${projectDir}" + (innerBuild.toBoolean() ? "/../schemas/" : "/../../") + schemaFile
    String schemaName = schemaFile.lastIndexOf('/') != -1 ?
            schemaFile.takeBetween('/', '.') :
            schemaFile.take(schemaFile.lastIndexOf('.'))
    String outputFile = "${projectDir}/../doc/" + schemaName + ".html"

    workingDir "${projectDir}/extracted/oxygen"
    commandLine "scripts/" + scriptToRun, schemaFilePath, "-out:" + outputFile
    doLast {
        if (execResult.getExitValue() != 0) {
            println new File(outputFile).text
            throw new TaskExecutionException(it, new Exception("Generation failed, see task output for details."))
        }
    }
}

defaultTasks 'generateDoc'

